import collections

def push(row, col, dist, current_val, visited, queue):
        if not (0 <= row < len(matrix)) or not (0 <= col < len(matrix[0])): 
            return
        if (row, col) in visited: 
            return
        compare_val = matrix[row][col].replace('E', 'z')
        if ord(compare_val) > ord(current_val) + 1: 
            return
        visited.add((row, col))
        queue.append((row, col, dist + 1, compare_val))

def exploit(matrix, *start):
    queue = collections.deque()
    for row in range(len(matrix)): 
        for col in range(len(matrix[0])):
            if matrix[row][col] in start:   
                queue.append((row, col, 0, 'a'))
    visited = set((i, j) for i, j, _, _ in queue)

    while len(queue):
        row, col, dist, val = queue.popleft()
        if matrix[row][col] == 'E': return dist
        push(row + 1, col, dist, val, visited, queue)
        push(row - 1, col, dist, val, visited, queue)
        push(row, col + 1, dist, val, visited, queue)
        push(row, col - 1, dist, val, visited, queue)

matrix = []
with open ("input.txt", "r") as input:
      Lines = input.readlines()
      for line in Lines:
        line.split("\n")
        matrix.append(line.split("\n")[0])
print(f" {exploit(matrix, 'S')}, {exploit(matrix, 'S', 'a')}")